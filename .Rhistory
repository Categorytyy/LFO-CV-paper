source("sim_functions.R")
library(tidyverse)
library(foreach)
library(doParallel)
chains <- 1
iter <- 1000
warmup <- 500
control <- list(adapt_delta = 0.8)
# SEED <- 121
# set.seed(SEED)
nsims <- 10
conditions <- expand.grid(
N = 200, M = 1, L = 25, B = NA,
model = c("constant", "AR2-only", "AR2-linear", "AR2-quadratic"),
k_thres = c(0.5, 0.6, 0.7),
sim = seq_len(nsims)
)
conditions$res <- list(list())
I <- seq_len(nrow(conditions))
conditions$res[I] <-
foreach(i = I, .packages = c("brms", "loo")) %do%
sim_fun(i, conditions, chains = chains, iter = iter,
warmup = warmup, control = control)
conditions <- expand.grid(
N = 100, M = 1, L = 25, B = NA,
model = c("constant", "AR2-only", "AR2-linear", "AR2-quadratic"),
k_thres = c(0.5, 0.6, 0.7),
sim = seq_len(nsims)
)
conditions$res <- list(list())
conditions$res[I] <-
foreach(i = I, .packages = c("brms", "loo")) %do%
sim_fun(i, conditions, chains = chains, iter = iter,
warmup = warmup, control = control)
source('C:/Users/paulb/Dropbox/Paper/2018_PSIS_LFO_CV/LFO_simulations/sim_AR_models.R', echo=TRUE)
source('C:/Users/paulb/Dropbox/Paper/2018_PSIS_LFO_CV/LFO_simulations/sim_AR_models.R', echo=TRUE)
warnings()
source('C:/Users/paulb/Dropbox/Paper/2018_PSIS_LFO_CV/LFO_simulations/sim_AR_models.R', echo=TRUE)
conditions$res[[1]]
conditions$res[[5]]
x <- 1
attr(x, "a") <- NULL
attr(x, "a") <- numeric(0)
x
library(tidyverse)
colors <- unname(unlist(bayesplot::color_scheme_get()[c(6, 2)]))
# theme_set(bayesplot::theme_default(base_family = "sans"))
theme_set(theme_bw())
# data preparation
lfo_ar_models <- read_rds("results/lfo_ar_models.rds") %>%
as_tibble() %>%
mutate(
model = gsub("_", "-", model),
model = factor(model, levels = unique(model)),
k_thres = paste0("k = ", k_thres),
elpd_loo = map_dbl(res, ~ .$loo_cv$estimates["elpd_loo", 1]),
elpd_exact_lfo = map_dbl(res, ~ .$exact_elpd_1sap[1]),
elpd_approx_lfo = map_dbl(res, ~ .$approx_elpd_1sap[1]),
elpd_diff_lfo = elpd_approx_lfo - elpd_exact_lfo,
elpd_diff_loo = elpd_loo - elpd_exact_lfo,
nrefits = lengths(map(res, ~ attr(.$approx_elpds_1sap, "refits"))),
rel_nrefits = nrefits / (N - L)
)
# data preparation
lfo_ar_models <- read_rds("results/lfo_ar_models.rds") %>%
as_tibble() %>%
mutate(
model = gsub("_", "-", model),
model = factor(model, levels = unique(model)),
k_thres = paste0("k = ", k_thres),
elpd_loo = map_dbl(res, ~ .$loo_cv$estimates["elpd_loo", 1]),
elpd_exact_lfo = map_dbl(res, ~ .$exact_elpd_1sap[1]),
elpd_approx_lfo = map_dbl(res, ~ .$approx_elpd_1sap[1]),
elpd_diff_lfo = elpd_approx_lfo - elpd_exact_lfo,
elpd_diff_loo = elpd_loo - elpd_exact_lfo,
nrefits = lengths(map(res, ~ attr(.$approx_elpds_1sap, "refits"))),
rel_nrefits = nrefits / (N - L)
)
# LFO-1SAP plots ------------------------------------------------------------------
lfo_res <- lfo_ar_models %>%
filter(is.na(B), M == 1)
# plot differences to exact LFO
lfo_res %>%
select(elpd_diff_lfo, elpd_diff_loo, model, k_thres) %>%
gather("Type", "elpd_diff", elpd_diff_lfo, elpd_diff_loo) %>%
ggplot(aes(x = elpd_diff, fill = Type)) +
facet_grid(model ~ k_thres, scales = "free_y") +
xlim(c(-4, 15)) +
geom_density(alpha = 0.7) +
scale_fill_manual(
values = colors,
labels = c("Approximate LFO-CV", "Approximate LOO-CV")
) +
labs(x = 'Difference to exact LFO-CV', y = "Density") +
geom_vline(xintercept = 0, linetype = 2) +
theme(legend.position = "bottom") +
NULL
# plot number of refits
lfo_res %>%
ggplot(aes(x = nrefits)) +
facet_grid(model ~ k_thres) +
geom_vline(
aes(xintercept = nrefits),
linetype = 2,
data = lfo_res %>%
group_by(model, k_thres) %>%
summarise(nrefits = mean(nrefits))
) +
geom_histogram(fill = colors[1], bins = 30) +
xlab("Number of refits based on N = 200 and L = 25") +
ylab("Count") +
theme_bw()
source("sim_functions.R")
library(tidyverse)
library(foreach)
library(doParallel)
chains <- 1
iter <- 5000
warmup <- 1000
control <- list(adapt_delta = 0.95)
nsims <- 1
conditions <- expand.grid(
N = 200, M = 1, L = 25, B = NA,
model = c("constant", "AR2_only", "AR2_linear", "AR2_quadratic"),
k_thres = c(0.5, 0.6, 0.7),
sim = seq_len(nsims)
)
conditions$res <- list(list())
conditions
i = 3
sim_fun(i, conditions, chains = chains, iter = iter,
warmup = warmup, control = control)
debug(sim_fun)
sim_fun(i, conditions, chains = chains, iter = iter,
warmup = warmup, control = control)
hist(exact_elpds_1sap)
warnings()
library(brms)
library(loo)
debug(approx_lfo)
sim_fun <- function(i, conditions, ...) {
# simulate data and fit the corresponding model
fit <- fit_model(cond = conditions[i, ], ...)
N <- conditions$N[i]
M <- conditions$M[i]
L <- conditions$L[i]
B <- conditions$B[i]
k_thres <- conditions$k_thres[i]
# LOO-CV
loo_cv <- loo(log_lik(fit)[, (L + 1):N])
# Exact LFO-CV
# exact_elpds_1sap <- exact_lfo(fit, M = M, L = L, B = B)
# exact_elpd_1sap <- summarize_elpds(exact_elpds_1sap)
# Approximate LFO-CV
approx_elpds_1sap <- approx_lfo(
fit, M = M, L = L, B = B, k_thres = k_thres
)
approx_elpd_1sap <- summarize_elpds(approx_elpds_1sap)
# return all relevant information
list(
# fit requires too much space
loo_cv = loo_cv,
exact_elpds_1sap = exact_elpds_1sap,
exact_elpd_1sap = exact_elpd_1sap,
approx_elpds_1sap = approx_elpds_1sap,
approx_elpd_1sap = approx_elpd_1sap
)
}
debug(sim_fun)
sim_fun(i, conditions, chains = chains, iter = iter,
warmup = warmup, control = control)
N
B
ids
i
i_refit
iios
ioos
oos
ll
tmp = log_lik(fit_i, newdata = df[ioos, , drop = FALSE], oos = oos)
all.equal(tmp, log_lik(fit_i, newdata = df[ioos, , drop = FALSE]))
str(ll[, oos, drop = FALSE])
str(rowSums(ll[, oos, drop = FALSE]))
to
B
i:to
str(loglik)
loglik[, 200]
k
ioos
oos
ll
all.equal(ll, log_lik(fit_i, newdata = df[ioos, , drop = FALSE]))
i
to
str(loglik[, 199:200])
logratio
k
i:to
k
fit_i
k
i:to
k
out
k_thres
marginal_effects(fit)
preds <- posterior_predict(fit)
preds <- cbind(
Estimate = colMeans(preds),
Q5 = apply(preds, 2, quantile, probs = 0.05),
Q95 = apply(preds, 2, quantile, probs = 0.95)
)
ggplot(cbind(df, preds), aes(x = year, y = Estimate)) +
geom_smooth(aes(ymin = Q5, ymax = Q95), stat = "identity", size = 0.5) +
geom_point(aes(y = y)) +
labs(subtitle = "Mean (blue) and 90% predictive intervals (gray) vs. observed data (black)") +
plot_labs
preds <- posterior_predict(fit)
preds <- cbind(
Estimate = colMeans(preds),
Q5 = apply(preds, 2, quantile, probs = 0.05),
Q95 = apply(preds, 2, quantile, probs = 0.95)
)
ggplot(cbind(df, preds), aes(x = year, y = Estimate)) +
geom_smooth(aes(ymin = Q5, ymax = Q95), stat = "identity", size = 0.5) +
geom_point(aes(y = y)) +
labs(subtitle = "Mean (blue) and 90% predictive intervals (gray) vs. observed data (black)")
preds <- posterior_predict(fit)
preds <- cbind(
Estimate = colMeans(preds),
Q5 = apply(preds, 2, quantile, probs = 0.05),
Q95 = apply(preds, 2, quantile, probs = 0.95)
)
ggplot(cbind(df, preds), aes(x = syear, y = Estimate)) +
geom_smooth(aes(ymin = Q5, ymax = Q95), stat = "identity", size = 0.5) +
geom_point(aes(y = y)) +
labs(subtitle = "Mean (blue) and 90% predictive intervals (gray) vs. observed data (black)")
fit
preds <- posterior_predict(fit)
preds <- cbind(
Estimate = colMeans(preds),
Q5 = apply(preds, 2, quantile, probs = 0.05),
Q95 = apply(preds, 2, quantile, probs = 0.95)
)
ggplot(cbind(df, preds), aes(x = stime, y = Estimate)) +
geom_smooth(aes(ymin = Q5, ymax = Q95), stat = "identity", size = 0.5) +
geom_point(aes(y = y)) +
labs(subtitle = "Mean (blue) and 90% predictive intervals (gray) vs. observed data (black)")
ks
hist(ks)
plot(seq_len(ks), ks)
plot(seq_along(ks), ks)
refits
plot(seq_along(ks), ks, type = "l")
WAIC(fit)
bayes_R2(fit)
approx_elpd_1sap
exact_elpds_1sap <- exact_lfo(fit, M = M, L = L, B = B)
exact_elpds_1sap
approx_elpds_1sap
plot(approx_elpds_1sap, exact_elpds_1sap)
exact_elpd_1sap <- summarize_elpds(exact_elpds_1sap)
exact_elpd_1sap
approx_elpds_1sap
approx_elpd_1sap <- summarize_elpds(approx_elpds_1sap)
approx_elpd_1sap
diff <- exact_elpd_1sap - approx_elpd_1sap
plot(seq_along(diff), diff)
diff
diff <- exact_elpds_1sap - approx_elpds_1sap
plot(seq_along(diff), diff)
source('C:/Users/paulb/Dropbox/Paper/2018_PSIS_LFO_CV/LFO_simulations/sim_functions.R', echo=TRUE)
debug(sim_fun)
conditions$res[I] <-
foreach(i = I, .packages = c("brms", "loo")) %dopar%
sim_fun(i, conditions, chains = chains, iter = iter,
warmup = warmup, control = control)
i
source('C:/Users/paulb/Dropbox/Paper/2018_PSIS_LFO_CV/LFO_simulations/sim_functions.R', echo=TRUE)
J = 3
sim_fun(j, conditions, chains = chains, iter = iter,
warmup = warmup, control = control)
j = 3
sim_fun(j, conditions, chains = chains, iter = iter,
warmup = warmup, control = control)
debug(sim_fun)
sim_fun(j, conditions, chains = chains, iter = iter,
warmup = warmup, control = control)
source('C:/Users/paulb/Dropbox/Paper/2018_PSIS_LFO_CV/LFO_simulations/sim_functions.R', echo=TRUE)
source('C:/Users/paulb/Dropbox/Paper/2018_PSIS_LFO_CV/LFO_simulations/sim_functions.R', echo=TRUE)
sim_fun(j, conditions, chains = chains, iter = iter,
warmup = warmup, control = control)
debug(sim_fun)
sim_fun(j, conditions, chains = chains, iter = iter,
warmup = warmup, control = control)
exact_elpd_1sap
warnings()
approx_elpd_1sap
exact_elpd_1sap
source('C:/Users/paulb/Dropbox/Paper/2018_PSIS_LFO_CV/LFO_simulations/sim_functions.R', echo=TRUE)
debug(sim_fun)
sim_fun(j, conditions, chains = chains, iter = iter,
warmup = warmup, control = control)
exact_elpd_1sap
approx_elpd_1sap
exact_elpd_1sap
library(tidyverse)
colors <- unname(unlist(bayesplot::color_scheme_get()[c(6, 2)]))
# theme_set(bayesplot::theme_default(base_family = "sans"))
theme_set(theme_bw())
# data preparation
lfo_ar_models <- read_rds("results/lfo_ar_models.rds") %>%
as_tibble() %>%
mutate(
model = gsub("_", "-", model),
model = factor(model, levels = unique(model)),
k_thres = paste0("k = ", k_thres),
elpd_loo = map_dbl(res, ~ .$loo_cv$estimates["elpd_loo", 1]),
elpd_exact_lfo = map_dbl(res, ~ .$exact_elpd_1sap[1]),
elpd_approx_lfo = map_dbl(res, ~ .$approx_elpd_1sap[1]),
elpd_diff_lfo = elpd_approx_lfo - elpd_exact_lfo,
elpd_diff_loo = elpd_loo - elpd_exact_lfo,
nrefits = lengths(map(res, ~ attr(.$approx_elpds_1sap, "refits"))),
rel_nrefits = nrefits / (N - L)
)
# LFO-1SAP plots ------------------------------------------------------------------
lfo_res <- lfo_ar_models %>% filter(is.na(B), M == 1)
# plot differences to exact LFO
lfo_res %>%
select(elpd_diff_lfo, elpd_diff_loo, model, k_thres) %>%
gather("Type", "elpd_diff", elpd_diff_lfo, elpd_diff_loo) %>%
ggplot(aes(x = elpd_diff, fill = Type)) +
facet_grid(model ~ k_thres, scales = "free_y") +
xlim(c(-4, 15)) +
geom_density(alpha = 0.7) +
scale_fill_manual(
values = colors,
labels = c("Approximate LFO-CV", "Approximate LOO-CV")
) +
labs(x = 'Difference to exact LFO-CV', y = "Density") +
geom_vline(xintercept = 0, linetype = 2) +
theme(legend.position = "bottom") +
NULL
ggsave("plots/LFO_1SAP_AR_models_ELPD.jpeg", width = 7, height = 6)
# plot number of refits
lfo_res %>%
ggplot(aes(x = nrefits)) +
facet_grid(model ~ k_thres) +
geom_vline(
aes(xintercept = nrefits),
linetype = 2,
data = lfo_res %>%
group_by(model, k_thres) %>%
summarise(nrefits = mean(nrefits))
) +
geom_histogram(fill = colors[1], bins = 30) +
xlab("Number of refits based on N = 200 and L = 25") +
ylab("Count") +
theme_bw()
ggsave("plots/LFO_1SAP_AR_models_nrefits.jpeg", width = 6, height = 6)
# plot relative number of refits
lfo_res %>%
ggplot(aes(x = rel_nrefits)) +
facet_grid(model ~ k_thres) +
geom_vline(
aes(xintercept = rel_nrefits),
linetype = 2,
data = lfo_res %>%
group_by(model, k_thres) %>%
summarise(rel_nrefits = mean(rel_nrefits))
) +
geom_histogram(fill = colors[1], bins = 30) +
xlab("Relative number of refits based on N = 200 and L = 25") +
ylab("Count") +
theme_bw()
ggsave("plots/LFO_1SAP_AR_models_rel_refits.jpeg", width = 6, height = 6)
# block-LFO-1SAP plots ------------------------------------------------------------
block_lfo_res <- lfo_ar_models %>%
filter(!is.na(B), M == 1)
# plot differences to exact LFO
block_lfo_res %>%
select(elpd_diff_lfo, elpd_diff_loo, model, k_thres) %>%
gather("Type", "elpd_diff", elpd_diff_lfo, elpd_diff_loo) %>%
ggplot(aes(x = elpd_diff, fill = Type)) +
facet_grid(model ~ k_thres, scales = "free_y") +
xlim(c(-4, 15)) +
geom_density(alpha = 0.7) +
scale_fill_manual(
values = colors,
labels = c("Approximate LFO-CV", "Approximate LOO-CV")
) +
labs(x = 'Difference to exact block-LFO-CV', y = "Density") +
geom_vline(xintercept = 0, linetype = 2) +
theme(legend.position = "bottom") +
NULL
ggsave("plots/block_LFO_1SAP_AR_models_ELPD.jpeg", width = 7, height = 6)
# plot number of refits
block_lfo_res %>%
ggplot(aes(x = nrefits)) +
facet_grid(model ~ k_thres) +
geom_vline(
aes(xintercept = nrefits),
linetype = 2,
data = block_lfo_res %>%
group_by(model, k_thres) %>%
summarise(nrefits = mean(nrefits))
) +
geom_histogram(fill = colors[1], bins = 10) +
xlab("Number of refits based on N = 200, L = 25, and B = 10") +
ylab("Count") +
theme_bw()
ggsave("plots/block_LFO_1SAP_AR_models_nrefits.jpeg", width = 6, height = 6)
# plot relative number of refits
block_lfo_res %>%
ggplot(aes(x = rel_nrefits)) +
facet_grid(model ~ k_thres) +
geom_vline(
aes(xintercept = rel_nrefits),
linetype = 2,
data = block_lfo_res %>%
group_by(model, k_thres) %>%
summarise(rel_nrefits = mean(rel_nrefits))
) +
geom_histogram(fill = colors[1], bins = 10) +
xlab("Relative number of refits based on N = 200 and L = 25") +
ylab("Count") +
theme_bw()
ggsave("plots/block_LFO_1SAP_AR_models_rel_refits.jpeg", width = 6, height = 6)
library(tidyverse)
colors <- unname(unlist(bayesplot::color_scheme_get()[c(6, 2)]))
# theme_set(bayesplot::theme_default(base_family = "sans"))
theme_set(theme_bw())
# data preparation
lfo_ar_models <- read_rds("results/lfo_ar_models.rds") %>%
as_tibble() %>%
mutate(
model = gsub("_", "-", model),
model = factor(model, levels = unique(model)),
k_thres = paste0("k = ", k_thres),
elpd_loo = map_dbl(res, ~ .$loo_cv$estimates["elpd_loo", 1]),
elpd_exact_lfo = map_dbl(res, ~ .$exact_elpd_1sap[1]),
elpd_approx_lfo = map_dbl(res, ~ .$approx_elpd_1sap[1]),
elpd_diff_lfo = elpd_approx_lfo - elpd_exact_lfo,
elpd_diff_loo = elpd_loo - elpd_exact_lfo,
nrefits = lengths(map(res, ~ attr(.$approx_elpds_1sap, "refits"))),
rel_nrefits = nrefits / (N - L)
)
# LFO-4SAP plots ------------------------------------------------------------------
lfo_res_4sap <- lfo_ar_models %>% filter(is.na(B), M == 4)
# plot differences to exact LFO
lfo_res_4sap %>%
select(elpd_diff_lfo, model, k_thres) %>%
ggplot(aes(x = elpd_diff_lfo)) +
facet_grid(model ~ k_thres, scales = "free_y") +
geom_density(alpha = 0.7, fill = colors[1]) +
labs(x = 'Difference to exact LFO-CV', y = "Density") +
geom_vline(xintercept = 0, linetype = 2) +
theme(legend.position = "bottom") +
NULL
# plot number of refits
lfo_res_4sap %>%
ggplot(aes(x = nrefits)) +
facet_grid(model ~ k_thres) +
geom_vline(
aes(xintercept = nrefits),
linetype = 2,
data = lfo_res_4sap %>%
group_by(model, k_thres) %>%
summarise(nrefits = mean(nrefits))
) +
geom_histogram(fill = colors[1], bins = 10) +
xlab("Number of refits based on N = 200 and L = 25") +
ylab("Count") +
theme_bw()
source('C:/Users/paulb/Dropbox/Paper/2018_PSIS_LFO_CV/LFO_simulations/analyse_AR_models.R', echo=TRUE)
i = 4
i_refit = 5
3:1
B = Inf
max(i + B, i_refit) <= (i_refit + B - 1)
Inf <= Inf
Inf:nf
Inf:Inf
seq
seq2
?seq
seq_pos <- function(from, to, ...) {
if (from > to) {
out <- integer(0)
} else {
out <- seq.int(from, to, ...)
}
out
}
seq_pos(4 3)
seq_pos(4, 3)
seq_pos(3, 3)
seq_pos(3, 10)
seq_pos(Inf, Inf)
seq_pos(0, Inf)
Inf > Inf
is.infinite(Inf)
rowSums(matrix(1:4, 2, 2)[, integer(0)])
A <- matrix(1:4, 2, 2)
A[, integer(0)] <- A[, integer(0)]
A
A[, integer(0)]
